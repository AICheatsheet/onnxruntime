jobs:
- job: Linux_Java_API_Build_GPU_x64
  workspace:
    clean: all
  timeoutInMinutes:  60
  pool: 'Linux-GPU-CUDA10'
  steps:
    - template: templates/set-version-number-variables-step.yml
    - task: CmdLine@2
      inputs:
        script: |
          docker build --pull -t onnxruntime-centos6-gpu --build-arg BUILD_USER=onnxruntimedev --build-arg BUILD_UID=$(id -u) --build-arg PYTHON_VERSION=$(python.version) -f Dockerfile.centos6_gpu .
        workingDirectory: $(Build.SourcesDirectory)/tools/ci_build/github/linux/docker
    - task: CmdLine@2
      inputs:
        script: |
          docker run --gpus all -e NVIDIA_VISIBLE_DEVICES=all --rm --volume $(Build.SourcesDirectory):/onnxruntime_src --volume $(Build.BinariesDirectory):/build --volume /data/models:/build/models:ro -e NIGHTLY_BUILD onnxruntime-centos6-gpu /usr/bin/python3.6 /onnxruntime_src/tools/ci_build/build.py --build_dir /build --config Release --skip_submodule_sync  --parallel --build_java --build_shared_lib --cmake_path /usr/bin/cmake --ctest_path /usr/bin/ctest --use_cuda --cuda_version=10.1 --cuda_home=/usr/local/cuda-10.1  --cudnn_home=/usr/local/cuda-10.1
        workingDirectory: $(Build.SourcesDirectory)
    - template: templates/java-api-artifacts-package-and-publish-steps-posix.yml
      parameters:
          arch: 'linux-x64'
          buildConfig: 'Release'
          artifactName: 'onnxruntime-java-linux-x64-gpu-$(OnnxRuntimeVersion)'
          version: '$(OnnxRuntimeVersion)'
          libraryName: 'libonnxruntime.so'
          nativeLibraryName: 'libonnxruntime4j_jni.so'
    - template: templates/clean-agent-build-directory-step.yml

- job: Windows_Java_API_Build_GPU_x64
  workspace:
    clean: all
  pool: 'Win-GPU-2019'
  timeoutInMinutes:  120
  variables:
    EnvSetupScript: setup_env_cuda.bat
    buildArch: x64
    msbuildArch: amd64
    msbuildPlatform: x64
    buildparameter: --use_cuda --cuda_version=10.1 --cuda_home="C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1" --cudnn_home="C:\local\cudnn-10.1-windows10-x64-v7.6.5.32\cuda"
  steps:
    - task: UsePythonVersion@0
      inputs: 
        versionSpec: '3.7' 
        addToPath: true 
        architecture: $(buildArch)

    - task: BatchScript@1
      displayName: 'setup env'
      inputs:
        filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\$(EnvSetupScript)'
        modifyEnvironment: true
        workingFolder: '$(Build.BinariesDirectory)'

    - script: |
       python -m pip install -q pyopenssl setuptools wheel numpy scipy
      workingDirectory: '$(Build.BinariesDirectory)'
      displayName: 'Install python modules' 
    - powershell: |
       $Env:USE_MSVC_STATIC_RUNTIME=1
       $Env:ONNX_ML=1
       $Env:CMAKE_ARGS="-DONNX_USE_PROTOBUF_SHARED_LIBS=OFF -DProtobuf_USE_STATIC_LIBS=ON -DONNX_USE_LITE_PROTO=ON -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=$(buildArch)-windows-static"
       python setup.py bdist_wheel
       Get-ChildItem -Path dist/*.whl | foreach {pip --disable-pip-version-check install --upgrade $_.fullname}   
      workingDirectory: '$(Build.SourcesDirectory)\cmake\external\onnx'
      displayName: 'Install ONNX'

    - template: templates/set-test-data-variables-step.yml
    - template: templates/set-version-number-variables-step.yml

    - task: PythonScript@0
      displayName: 'Generate cmake config'
      inputs:
        scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
        arguments: '--config RelWithDebInfo --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --update --cmake_generator "Visual Studio 16 2019" --enable_lto --build_java --use_openmp --build_shared_lib --enable_onnx_tests $(buildparameter)'
        workingDirectory: '$(Build.BinariesDirectory)'

 
    - task: VSBuild@1
      displayName: 'Build'
      inputs:
        solution: '$(Build.BinariesDirectory)\RelWithDebInfo\onnxruntime.sln'
        platform: $(msbuildPlatform)
        configuration: RelWithDebInfo
        msbuildArchitecture: $(buildArch)
        maximumCpuCount: true
        logProjectEvents: true
        workingFolder: '$(Build.BinariesDirectory)\RelWithDebInfo'
        createLogFile: true

    - task: PythonScript@0
      displayName: 'test'
      inputs:
        scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
        arguments: --config RelWithDebInfo --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --test --cmake_generator "Visual Studio 16 2019" --enable_lto --build_java --use_openmp --build_shared_lib --enable_onnx_tests $(buildparameter)'
        workingDirectory: '$(Build.BinariesDirectory)'

    - template: templates/java-api-artifacts-package-and-publish-steps-windows.yml
      parameters:
        buildConfig: RelWithDebInfo
        artifactName: 'onnxruntime-java-win-$(buildArch)-gpu-$(OnnxRuntimeVersion)'
        version: '$(OnnxRuntimeVersion)'
        commitId: $(OnnxRuntimeGitCommitHash)
    - template: templates/clean-agent-build-directory-step.yml

- job: Jar_Packaging
  workspace:
    clean: all
  pool: 'Win-CPU-2019'
  dependsOn:
  - Windows_Java_API_Build_GPU_x64
  - Linux_Java_API_Build_GPU_x64
  condition: succeeded()
  steps:

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - Win x64'
    inputs:
      artifactName: 'drop-onnxruntime-java-win-x64-$(OnnxRuntimeVersion)'
      targetPath: '$(Build.BinariesDirectory)/java-artifact'

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - Linux x64'
    inputs:
      artifactName: 'drop-onnxruntime-java-linux-x64-$(OnnxRuntimeVersion)'
      targetPath: '$(Build.BinariesDirectory)/java-artifact'

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Build.BinariesDirectory)/nuget-artifact/onnxruntime-java-win-x64.zip'
      destinationFolder: '$(Build.BinariesDirectory)/java-artifact/win-x64'
      cleanDestinationFolder: true

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Build.BinariesDirectory)/nuget-artifact/onnxruntime-java-linux-x64.zip'
      destinationFolder: '$(Build.BinariesDirectory)/java-artifact/linux-x64'
      cleanDestinationFolder: true

  - task: CmdLine@2
    inputs:
      script: |
        pushd linux-x64
        jar uf  $(Build.BinariesDirectory)\java-artifact\win-x64\onnxruntime-$(OnnxRuntimeVersion).jar ai\onnxruntime\native\libonnxruntime.so
        jar uf  $(Build.BinariesDirectory)\java-artifact\win-x64\onnxruntime-$(OnnxRuntimeVersion).jar ai\onnxruntime\native\libonnxruntime4j_jni.so
        popd
        pushd osx-x64
        jar uf  $(Build.BinariesDirectory)\java-artifact\win-x64\onnxruntime-$(OnnxRuntimeVersion).jar ai\onnxruntime\native\libonnxruntime.dylib
        jar uf  $(Build.BinariesDirectory)\java-artifact\win-x64\onnxruntime-$(OnnxRuntimeVersion).jar ai\onnxruntime\native\libonnxruntime4j_jni.dlib
        jar uf  $(Build.BinariesDirectory)\java-artifact\win-x64\onnxruntime-$(OnnxRuntimeVersion).jar ai\onnxruntime\native\libonnxruntime.dylib.dSYM
        jar uf  $(Build.BinariesDirectory)\java-artifact\win-x64\onnxruntime-$(OnnxRuntimeVersion).jar ai\onnxruntime\native\libonnxruntime4j_jni.dylib.dSYM
        popd
      workingDirectory: '$(Build.BinariesDirectory)\java-artifact'
      displayName: 'Create final GPU Jar'

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.BinariesDirectory)\java-artifact\win-x64'
      artifact: 'onnxruntime-java-gpu'
      publishLocation: 'pipeline'
